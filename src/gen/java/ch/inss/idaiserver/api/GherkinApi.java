/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ch.inss.idaiserver.api;

import io.swagger.annotations.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2021-01-23T13:14:27.767932+01:00[Europe/Zurich]")
@Validated
@Api(value = "gherkin", description = "the gherkin API")
public interface GherkinApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /gherkin/{testid} : Get the content of the generated Gherkin feature file.
     * Get the content of the generated Gherkin feature file.
     *
     * @param testid testid for that Gherkin file. (required)
     * @return Content of the generated Gherkin feature file. (status code 200)
     *         or Internal server error. (status code 500)
     *         or unexpected error (status code 200)
     */
    @ApiOperation(value = "Get the content of the generated Gherkin feature file.", nickname = "getgherkin", notes = "Get the content of the generated Gherkin feature file.", response = String.class, tags={ "Results", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Content of the generated Gherkin feature file.", response = String.class),
        @ApiResponse(code = 500, message = "Internal server error."),
        @ApiResponse(code = 200, message = "unexpected error") })
    @GetMapping(
        value = "/gherkin/{testid}",
        produces = { "text/plain" }
    )
    default ResponseEntity<String> getgherkin(@ApiParam(value = "testid for that Gherkin file.",required=true) @PathVariable("testid") String testid) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
