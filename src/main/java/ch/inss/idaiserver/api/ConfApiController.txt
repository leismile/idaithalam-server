package ch.inss.idaiserver.api;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import ch.inss.idaiserver.config.MethodLogger;
import ch.inss.idaiserver.model.Cucumblan;
import ch.inss.idaiserver.service.TestService;
import ch.inss.idaiserver.utils.FileManagement;
import io.swagger.annotations.ApiParam;

import java.util.Optional;

import javax.validation.Valid;
import javax.validation.constraints.NotNull;

@Controller
@RequestMapping("${openapi.idaiserver.base-path:}")
public class ConfApiController implements ConfApi {

    private static final Logger logger = LoggerFactory.getLogger(ConfApiController.class);
    private final NativeWebRequest request;
    
    @Autowired private Cucumblan cucumblan;

    @org.springframework.beans.factory.annotation.Autowired
    public ConfApiController(NativeWebRequest request) {
        this.request = request;
    }

    @Override
    public Optional<NativeWebRequest> getRequest() {
        return Optional.ofNullable(request);
    }
    
    /*
    @Override
    public ResponseEntity<Void> addcollection(@ApiParam(value = "") @Valid @RequestPart(value = "fileStream", required = false) MultipartFile fileStream) {
        if ( FileManagement.addCollection(fileStream) ) {
            return new ResponseEntity<>(HttpStatus.CREATED);
        }else {
            return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
        }
    }
    
    @Override
    public ResponseEntity<String> addserver(@NotNull @ApiParam(value = "Serverurl to add to the test configuration.", required = true) @Valid @RequestParam(value = "serverurl", required = true) String serverurl,@NotNull @ApiParam(value = "This parameter must contain the resource of the server. If e.g. the API resource is /pet then the resource name must be \"pet\". Only API endpoints with /<resource> will be executed for this server url in the test.", required = true) @Valid @RequestParam(value = "resource", required = true) String resource) {
        return new ResponseEntity<String>(FileManagement.addLine(serverurl, resource),HttpStatus.CREATED);
    }
    
    @Override
    public ResponseEntity<String> getgherkin() {
        return new ResponseEntity<String>(FileManagement.getFeaturefile(), HttpStatus.OK);

    }
    
    /** GET Property.  
    @Override
    //@MethodLogger(ConfApiController.class)
    public ResponseEntity<String> getproperty() {
        return new ResponseEntity<String>(FileManagement.getPropertyfile(), HttpStatus.OK);

    }
    
    /*TODO Delete a serverurl. 
    @Override
    public ResponseEntity<Void> removeserver(@NotNull @ApiParam(value = "Serverurl to be removed from the configuration.", required = true) @Valid @RequestParam(value = "serverurl", required = true) String serverurl) {
        FileManagement.removeServer(serverurl);
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);

    }
    */

}
